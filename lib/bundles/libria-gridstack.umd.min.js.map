{"version":3,"sources":["ng://@libria/gridstack/components/gridstack-item.component.ts","ng://@libria/gridstack/services/gridstack.service.ts","ng://@libria/gridstack/components/gridstack.component.ts","ng://@libria/gridstack/gridstack.module.ts"],"names":["_sequence","GridstackItemComponent","elem","_renderer","this","toString","prototype","ngAfterViewInit","addClass","nativeElement","_setAttributeIfNotUndefined","x","y","width","height","id","maxWidth","maxHeight","minWidth","minHeight","_setAttributeIfTrue","noResize","noMove","autoPosition","locked","attrName","val","_","isNull","isUndefined","setAttribute","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Input","GridstackService","addGrid","grid","_grids","push","removeGrid","splice","findIndex","g","generatedId","_gridItems","filter","gi","gridId","attachGridItem","gridItemId","find","item","detachGridItemIfExists","gridItem","getGridItems","map","getOrphanGridItems","addOrphanGridItem","removeGridItem","Injectable","GridstackComponent","_zone","_el","_gridstackService","EventEmitter","Subject","ngOnInit","_this","options","acceptWidgets","console","error","runOutsideAngular","_isValueTrue","animate","el","$","gridstack","data","_gridstack","on","evt","items","itemsOfCurrentGrid","nodes","i","attr","split","s","startsWith","replace","some","ei","forEach","added","emit","change","existingItemIds","removed","ngOnChanges","changes","heightChanges","optionsChanges","isFirstChange","currentValue","previousValue","_updateGridstackHeight","prev","curr","cellHeight","gridstackItems","pipe","takeUntil","_ngUnsubscribe","subscribe","_handleItemChanges","toArray","ngOnDestroy","next","destroy","itemsToAdd","w","itemsToRemove","batchUpdate","_addItem","_removeItem","commit","willItFit","makeWidget","removeWidget","NgZone","ContentChildren","Output","GridstackModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Item } from './models/item';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Host,\r\n    Input,\r\n    NgZone,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { GridItem } from './models/grid-item';\r\n\r\ndeclare var _: any;\r\nlet _sequence = 0;\r\n\r\n@Component({\r\n    selector: 'div[lb-gridstack-item]',\r\n    templateUrl: './gridstack-item.component.html',\r\n    styleUrls: ['./gridstack-item.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridstackItemComponent implements AfterViewInit, GridItem { \r\n    @Input() x: number | string;\r\n    @Input() y: number | string;\r\n    @Input() width: number | string;\r\n    @Input() height: number | string;\r\n    @Input() id: string;\r\n    @Input('max-width') maxWidth: number | string;\r\n    @Input('max-height') maxHeight: number | string;\r\n    @Input('min-width') minWidth: number | string;\r\n    @Input('min-height') minHeight: number | string;\r\n    @Input('no-resize') noResize: boolean | string;\r\n    @Input('no-move') noMove: boolean | string;\r\n    @Input('auto-position') autoPosition: boolean | string;\r\n    @Input() locked: boolean | string;\r\n    public generatedId: string = (_sequence++).toString();\r\n\r\n    constructor(public elem: ElementRef,\r\n        private _renderer: Renderer2\r\n    ) { }\r\n\r\n    ngAfterViewInit() {\r\n        this._renderer.addClass(this.elem.nativeElement, 'grid-stack-item');\r\n        this._setAttributeIfNotUndefined('data-gs-x', this.x);\r\n        this._setAttributeIfNotUndefined('data-gs-y', this.y);\r\n        this._setAttributeIfNotUndefined('data-gs-width', this.width);\r\n        this._setAttributeIfNotUndefined('data-gs-height', this.height);\r\n        this._setAttributeIfNotUndefined('data-gs-id', this.id);\r\n        this._setAttributeIfNotUndefined('data-gs-max-width', this.maxWidth);\r\n        this._setAttributeIfNotUndefined('data-gs-max-height', this.maxHeight);\r\n        this._setAttributeIfNotUndefined('data-gs-min-width', this.minWidth);\r\n        this._setAttributeIfNotUndefined('data-gs-min-height', this.minHeight);\r\n        \r\n        this._setAttributeIfTrue('data-gs-no-resize', this.noResize);\r\n        this._setAttributeIfTrue('data-gs-no-move', this.noMove);\r\n        this._setAttributeIfTrue('data-gs-auto-position', this.autoPosition);\r\n        this._setAttributeIfTrue('data-gs-locked', this.locked);\r\n    }\r\n\r\n    private _setAttributeIfNotUndefined(attrName: string, val: number | string): void {\r\n        if (!_.isNull(val) && !_.isUndefined(val)) {\r\n            this._renderer.setAttribute(this.elem.nativeElement, attrName, val.toString());\r\n        }\r\n    }\r\n\r\n    private _setAttributeIfTrue(attrName: string, val: boolean | string): void {\r\n        if (val === true || val === 'true') {\r\n            this._renderer.setAttribute(this.elem.nativeElement, attrName, 'true');\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Grid } from '../components/models/grid';\r\nimport { GridItem } from '../components/models/grid-item';\r\n\r\n@Injectable()\r\nexport class GridstackService {\r\n    private _gridItems: {\r\n        gridId: string;\r\n        item: GridItem;\r\n    }[] = [];\r\n\r\n    private _grids:Grid[] = [];\r\n\r\n    constructor() { }\r\n\r\n    addGrid(grid: Grid) {\r\n        this._grids.push(grid);\r\n    }\r\n\r\n    removeGrid(grid: Grid) {\r\n        this._grids.splice(this._grids.findIndex(g => g.generatedId == grid.generatedId), 1);\r\n        this._gridItems = this._gridItems.filter(gi => gi.gridId != grid.generatedId);\r\n    }\r\n\r\n    attachGridItem(gridId: string, gridItemId: string) {\r\n        this._gridItems.find(gi => gi.item.generatedId == gridItemId).gridId = gridId;\r\n    }\r\n\r\n    detachGridItemIfExists(gridItemId: string) {\r\n        const gridItem = this._gridItems.find(gi => gi.item.generatedId == gridItemId);\r\n\r\n        if (!!gridItem) {\r\n            gridItem.gridId = null;\r\n        }\r\n    }\r\n\r\n    getGridItems(gridId: string) {\r\n        return this._gridItems.filter(gi => gi.gridId == gridId).map(g => g.item);\r\n    }\r\n\r\n    getOrphanGridItems() {\r\n        return this._gridItems.filter(gi => gi.gridId == null).map(g => g.item);\r\n    }\r\n\r\n    addOrphanGridItem(gridItem: GridItem) {\r\n        this._gridItems.push({\r\n            gridId: null,\r\n            item: gridItem\r\n        });\r\n    }\r\n\r\n    removeGridItem(gridItemId: string) {\r\n        this._gridItems.splice(this._gridItems.findIndex(gi => gi.item.generatedId == gridItemId), 1);\r\n    }\r\n}","import { GridstackOptions } from './models/gridstack-options';\r\nimport {\r\n    AfterContentInit,\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ContentChildren,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    Output,\r\n    QueryList,\r\n    Renderer2,\r\n    ViewEncapsulation,\r\n    ViewContainerRef,\r\n    OnInit,\r\n    OnDestroy,\r\n    OnChanges,\r\n    SimpleChanges,\r\n} from '@angular/core';\r\n\r\ndeclare var _: any;\r\nlet _sequence = 0;\r\n\r\nimport { GridstackItemComponent } from './gridstack-item.component';\r\nimport { Item } from './models/item';\r\nimport { GridstackService } from '../services/gridstack.service';\r\nimport { Grid } from './models/grid';\r\nimport { GridItem } from './models/grid-item';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n    selector: 'div[lb-gridstack]',\r\n    templateUrl: './gridstack.component.html',\r\n    styleUrls: ['./gridstack.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class GridstackComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges, Grid {\r\n    @ContentChildren(GridstackItemComponent) gridstackItems: QueryList<GridstackItemComponent>;\r\n    @Input() options: GridstackOptions;\r\n    @Input() animate: boolean | string;\r\n    @Input() width: number | string;\r\n    @Input() height: number | string;\r\n\r\n    @Output() change = new EventEmitter<Item[]>();\r\n    @Output() added = new EventEmitter<Item[]>();\r\n    @Output() removed = new EventEmitter<Item[]>();\r\n\r\n    public generatedId = (_sequence++).toString();\r\n\r\n    private _gridstack: any;\r\n\r\n    private _ngUnsubscribe = new Subject();\r\n\r\n    constructor(private _zone: NgZone,\r\n        private _el: ElementRef,\r\n        private _renderer: Renderer2,\r\n        private _gridstackService: GridstackService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.options && this.options.acceptWidgets != null) {\r\n            console.error('acceptWidgets option not supported yet!');\r\n        }\r\n\r\n        this._zone.runOutsideAngular(() => {\r\n            this._renderer.addClass(this._el.nativeElement, 'grid-stack');\r\n\r\n            if (this._isValueTrue(this.animate)) {\r\n                this._renderer.setAttribute(this._el.nativeElement, 'data-gs-animate', 'true');\r\n            }\r\n\r\n            this._setAttributeIfNotUndefined('data-gs-width', this.width);\r\n            this._setAttributeIfNotUndefined('data-gs-height', this.height);\r\n\r\n            const width = this.width || (this.options || {}).width;\r\n\r\n            if (!_.isNull(width) && !_.isUndefined(width)) {\r\n                this._renderer.addClass(this._el.nativeElement, `grid-stack-${width}`);\r\n            }\r\n\r\n            const el = (<any>$(this._el.nativeElement)).gridstack(this.options);\r\n            $(el).data('generated-id', this.generatedId);\r\n            this._gridstack = $(el).data('gridstack');\r\n\r\n            this._gridstackService.addGrid(this);\r\n\r\n            // Hook events\r\n            $(this._el.nativeElement).on('added', (evt: any, items: Item[]) => {\r\n                const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n                const existingItemIds: string[] = (<any>this._gridstack).grid.nodes.map(i => $(i.el)\r\n                    .attr('class')\r\n                    .split(/\\s+/)\r\n                    .find(s => s.startsWith('lb-generated-id-'))\r\n                    .replace('lb-generated-id-', ''));\r\n\r\n                const itemsToAdd = existingItemIds.filter(i => !itemsOfCurrentGrid.some(ei => ei.generatedId == i));\r\n                itemsToAdd.forEach(i => this._gridstackService.attachGridItem(this.generatedId, i));\r\n\r\n                this.added.emit(items);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('change', (evt: any, items: Item[]) => {\r\n                this.change.emit(items);\r\n            });\r\n\r\n            $(this._el.nativeElement).on('removed', (evt: any, items: Item[]) => {\r\n                const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n                const existingItemIds: string[] = (<any>this._gridstack).grid.nodes.map(i => $(i.el)\r\n                    .attr('class')\r\n                    .split(/\\s+/)\r\n                    .find(s => s.startsWith('lb-generated-id-'))\r\n                    .replace('lb-generated-id-', ''));\r\n\r\n                const itemsToDelete = itemsOfCurrentGrid.filter(i => !existingItemIds.some(ei => ei == i.generatedId));\r\n                itemsToDelete.forEach(i => this._gridstackService.detachGridItemIfExists(i.generatedId));\r\n                this.removed.emit(items);\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const heightChanges = changes['height'];\r\n        const optionsChanges = changes['options'];\r\n\r\n        if (heightChanges && !heightChanges.isFirstChange() && heightChanges.currentValue != heightChanges.previousValue) {\r\n            this._updateGridstackHeight(+heightChanges.currentValue);\r\n        }\r\n\r\n        if (optionsChanges && !optionsChanges.isFirstChange()) {\r\n            const prev: GridstackOptions = optionsChanges.previousValue;\r\n            const curr: GridstackOptions = optionsChanges.currentValue;\r\n\r\n            if (curr.cellHeight != prev.cellHeight) {\r\n                this._updateGridstackHeight(curr.cellHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.gridstackItems.changes\r\n            .pipe(takeUntil(this._ngUnsubscribe))\r\n            .subscribe(changes => {\r\n                this._handleItemChanges(this.gridstackItems.toArray());\r\n            });\r\n\r\n        this._handleItemChanges(this.gridstackItems.toArray());\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._ngUnsubscribe.next();\r\n        this._gridstack.destroy();\r\n        this._gridstackService.removeGrid(this);\r\n    }\r\n\r\n    private _updateGridstackHeight(height: number | string) {\r\n        this._zone.runOutsideAngular(() => {\r\n            this._gridstack.cellHeight(<any>height);\r\n        });\r\n    }\r\n\r\n    private _handleItemChanges(items: GridstackItemComponent[]): void {\r\n        const itemsOfCurrentGrid = this._gridstackService.getGridItems(this.generatedId);\r\n        const itemsToAdd = items.filter(i => !itemsOfCurrentGrid.some(w => w.generatedId == i.generatedId));\r\n        const itemsToRemove = itemsOfCurrentGrid.filter(w => !items.some(i => i.generatedId == w.generatedId));\r\n\r\n        this._gridstack.batchUpdate();\r\n        itemsToAdd.forEach(i => this._addItem(i));\r\n        itemsToRemove.forEach(i => this._removeItem(i));\r\n        this._gridstack.commit();\r\n    }\r\n\r\n    private _addItem(item: GridstackItemComponent): void {\r\n        this._zone.runOutsideAngular(() => {\r\n            if (this._gridstack.willItFit(+item.x, +item.y, +item.width, +item.height, this._isValueTrue(item.autoPosition))) {\r\n                this._gridstackService.addOrphanGridItem(item);\r\n                $(item.elem.nativeElement).addClass('lb-generated-id-' + item.generatedId);\r\n                this._gridstack.makeWidget(item.elem.nativeElement);\r\n            } else {\r\n                console.error('Not enough free space to place the widget');\r\n            }\r\n        });\r\n    }\r\n\r\n    private _removeItem(item: GridItem): void {\r\n        this._gridstackService.removeGridItem(item.generatedId);\r\n\r\n        this._zone.runOutsideAngular(() => {\r\n            this._gridstack.removeWidget(item.elem.nativeElement);\r\n        });\r\n    }\r\n\r\n    private _setAttributeIfNotUndefined(attrName: string, val: number | string): void {\r\n        if (!_.isNull(val) && !_.isUndefined(val)) {\r\n            this._renderer.setAttribute(this._el.nativeElement, attrName, val.toString());\r\n        }\r\n    }\r\n\r\n    private _isValueTrue(val: boolean | string) {\r\n        return (val === true || val === 'true');\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridstackComponent } from './components/gridstack.component';\r\nimport { GridstackItemComponent } from './components/gridstack-item.component';\r\nimport { GridstackService } from './services/gridstack.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    declarations: [\r\n        GridstackComponent,\r\n        GridstackItemComponent],\r\n    exports: [\r\n        GridstackComponent,\r\n        GridstackItemComponent]\r\n})\r\nexport class GridstackModule {\r\n    public static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: GridstackModule,\r\n            providers: [\r\n                GridstackService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}